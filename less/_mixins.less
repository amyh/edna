// MIXINS

//----- MIXINS FOR MIXINS -----------------------------//


//----- CLEAR -----------------------------------------//

.clear() {
  clear: both;
}


//----- CLEARFIX --------------------------------------//

// ie7
.clearfix() {
  *zoom: 1;
    &:before,
    &:after,
    &::before,
    &::after {
      display: table;
      line-height: 0;
      content: "";
    }
    &:after,
    &::after {
      clear: both;
    }
}


//----- HIDDEN THINGS ---------------------------------//

// do not display (inaccessible by screen readers)
.display-none() {
    display: none;
}

// hidden (accessible by screen readers)
.hidden() {
    position: absolute !important;
    display: none;
    width: (@px * .1); 
    height: (@px * .1);
    clip: rect((@px * .1) (@px * .1) (@px * .1) (@px * .1)); // IE6, IE7
    clip: rect((@px * .1), (@px * .1), (@px * .1), (@px * .1));
    overflow: hidden;
}

.off-page {
    display: inline-block;
    font-size: 0;
    text-indent: -99999px
}


//----- FONTS --------------------------------------//

.fontfamily(@ff) {
    & when (@ff = sans) {
        font-family: Helvetica, Arial, sans-serif;
    }
    & when (@ff = serif) {
        font-family: Georgia, serif;
    }
    & when (@ff = lucida) {
        font-family: "Lucida Grande", sans-serif;
    }
    & when (@ff = tahoma) {
        font-family: Tahoma, sans-serif;
    }
    & when (@ff = mono) {
        font-family: monospace;
    }
    & when (@ff = code) {
        font-family: Monaco, Menlo, Consolas, "Courier New", monospace;
    }
}

.fontsize(@sizeValue) {
    @remValue: @sizeValue;
    @pxValue: (@sizeValue * 10);
    font-size: ~"@{pxValue}px"; // fallback for IE8
    font-size: ~"@{remValue}rem"; // REMs for awesome browsers
}

.lh(@n: 0; @s: px) when (@s = px), (@s = em), (@s = rem) {
    line-height: unit(@n, @s);
}

.lh(@n: 0; @s: px) when (@s = pct) {
    line-height: percentage(@n/100);
}


//----- HEADINGS --------------------------------------//

.headings(@num, @index: 1) when (@index <= @num) {

    @size: @h1-size, @h2-size, @h3-size, @h4-size, @h5-size, @h6-size;
    @vars: @h1-line-height, @h2-line-height, @h3-line-height, @h4-line-height, @h5-line-height, @h6-line-height;

    @sizeVal: extract(@size, @index);
    @varVal: extract(@vars, @index);

    h@{index} {
        
        // Box-model
        margin-top: 0;

        & when (@index = 1) {
            margin-bottom: 20px;
        }

        & when (@index = 2), (@index = 4), (@index = 5), (@index = 6) {
            margin-bottom: 20px;
        }

        & when (@index = 3) {
            margin-bottom: 10px;
        }

        // Typography
        .fontsize(@sizeVal);
        & when (@index = 1), (@index = 2), (@index = 3), (@index = 4), (@index = 5), (@index = 6) {
            font-weight: bold;
        }

        & when (@index = 6) {
            font-style: italic;
        }
        color: @colorP2;
        line-height: @varVal;

        > a,
        > a:visited,
        > a:focus,
        > a:active {
            // Typography
            color: @link-color;
            text-decoration: @link-decoration;
        }
        > a:visited {
            // Typography
            color: @link-color-visited;
            text-decoration: @link-decoration-visited;
        }
        > a:hover {
            // Typography
            color: @link-color-hover;
        }
        > a:focus {
            // Typography
            text-decoration: @link-decoration-focus;
        }
    }
    .headings(@num, (@index + 1));
}


//----- BOX SIZING ------------------------------------//

.box(@sizing) {
    & when (@sizing = content), (@sizing = border) {
    // should take either CONTENT or BORDER
    -webkit-box-sizing: escape("@{sizing}-box"); // Safari/Chrome, other WebKit
       -moz-box-sizing: escape("@{sizing}-box"); // Firefox, other Gecko
            box-sizing: escape("@{sizing}-box"); // Opera/IE 8+
    }
    & when (@sizing = inherit) {
    -webkit-box-sizing: escape("@{sizing}"); // Safari/Chrome, other WebKit
       -moz-box-sizing: escape("@{sizing}"); // Firefox, other Gecko
            box-sizing: escape("@{sizing}"); // Opera/IE 8+
    }
}


//----- BORDER RADIUS ----------------------------------------//

// set default value
@radius-sd: px;
.radius(@n: unit(@radius); @s: @radius-sd) when (@n = 0) {
    -moz-border-radius: @n;
    border-radius: @n;
}
.radius(@n: unit(@radius); @s: @radius-sd) when not (@n = 0) {
    -moz-border-radius: unit(@n, @s);
    border-radius: unit(@n, @s);
}

//----- TRANSPORT -------------------------------------//

.transport-top(@w: (@px * .5)) {
    margin-top: -(@w / 2);
    margin-bottom: (@w / 2);
    border-right-width: @w;
    border-bottom-width: @w;
    border-left-width: @w;
}

.transport-right(@w: (@px * .5)) {
    margin-right: -(@w / 2);
    margin-left: (@w / 2);
    border-top-width: @w;
    border-bottom-width: @w;
    border-left-width: @w;
}

.transport-bottom(@w: (@px * .5)) {
    margin-top: -(@w / 2);
    margin-bottom: (@w / 2);
    border-top-width: @w;
    border-right-width: @w;
    border-left-width: @w;
}

.transport-left(@w: (@px * .5)) {
    margin-right: -(@w / 2);
    margin-left: (@w / 2);
    border-top-width: @w;
    border-right-width: @w;
    border-bottom-width: @w;
}


//----- ROTATION --------------------------------------//

.rotate(@num) {
    @div: 100;
    @IE8rot: @num/@div;

    // USING THIS BIT OF LESS
    // unit(@dimension, [@unit: ""]);
    // remove or change the unit of a dimension

    filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=@IE8rot); // IE8 and lower
    -webkit-transform: rotate(unit(@num, deg)); // Safari
       -moz-transform: rotate( unit(@num, deg) ); // Mozilla
        -ms-transform: rotate( unit(@num, deg) ); // IE 9 and higher
         -o-transform: rotate( unit(@num, deg) ); // Opera
            transform: rotate( unit(@num, deg) );
}


//----- POSITION --------------------------------------//

.pos(@pos: relative) when (@pos = absolute), (@pos = fixed), (@pos = inherit), (@pos = relative), (@pos = static) {
    position: @pos;
}


//----- GRADIENTS ----------------------------------------//

.gradient(@color: @colorP3) {
    @top: fadeout(@color, 50%);
    @bottom: @color;
    background: @color;
    background: -webkit-gradient(linear, left bottom, left top, color-stop(0, @bottom), color-stop(1, @top));
    background: -moz-linear-gradient(center bottom, @bottom 0%, @top 100%);
    background:  -ms-linear-gradient(bottom, @bottom, @top);
    background:   -o-linear-gradient(@top, @bottom);
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",@top,@bottom));
}


//----- TRUNCATE ----------------------------------------//

.truncate() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}


//----- USER SELECT -------------------------------------//

.userselect {
    -webkit-user-select: none;
     -khtml-user-select: none;
       -moz-user-select: none;
        -ms-user-select: none;
}


//----- TRANSPORT HOVER ---------------------------------//
// .transporthover {
//     &:hover {
//         .transport .top {
//             border-bottom-color: @transport-color-hover;
//         }
//         .transport .right {
//             border-left-color: @transport-color-hover;
//         }
//         .transport .bottom {
//             border-top-color: @transport-color-hover;
//         }
//         .transport .left {
//             border-right-color: @transport-color-hover;
//         }
//     }
// }


//----- RTL ---------------------------------------------//
.international(@dir, @uni) {
    // Typography
    direction: @dir;
    unicode-bidi: @uni;
}


//----- FIXED WIDTH COLUMNS -----------------------------//
// takes two arguments, a width and a side
// w should be any number, minus the units
// s should be lowercase R or L
.fixedCol(@w, @s) {

    &.fixed-@{s} {
        // Box-model
        clear: both;

        > .col {
            & when (@s = r) {
                // Box-model
                width: 63%;
            }

            &.fw@{w} {
                // Box-model
                width: unit(@w + @p, px);
            
                & when (@s = r) {
                    // Box-model
                    float: right;
                    padding-right: 0;
                    margin-left: unit(-(@w + @p), px);
                }

                & when (@s = l) {
                    // Box-model
                    float: left;
                    padding-right: unit(@p, px);
                    padding-left: 0;
                    margin-right: unit(-(@w + @p), px);
                }

                + .col {
                    & when (@s = r) {
                        // Box-model
                        padding-right: unit(@w + @p, px);
                    }

                    & when (@s = l) {
                        // Box-model
                        width: 100%;
                        padding-left: unit(@w + @p, px);
                    }
                }
            }
        }
    }
}


//----- MESSAGING ---------------------------------------//
// get the array from the messaging stylesheet and loop through it
.msg(@arrayLength, @index: 1) when (@index =< @arrayLength) {
    @arrayVal: extract(@list, @index);

    &.msg-@{arrayVal} {
        // Visual
        background-color: ~"@{msg-@{arrayVal}-bgcolor}";
        border-color: ~"@{msg-@{arrayVal}-bordercolor}";
        .icon {
            // Box-model
            display: inline-block;
            width: 20px;
            height: 20px;
            
            // Visual
            background-image: url(~"@{msg-@{arrayVal}-icon}");
            background-repeat: no-repeat;
        }

        > .txt {
            // Typography
            color: ~"@{msg-@{arrayVal}-color}";
        }
    }
    .msg(@arrayLength, (@index + 1));
}


//----- INACTIVE ----------------------------------------//
.inactive() {
    &.inactive:after,
    &.inactive::after {
        // Typography
        color: @transport-inactive;
        cursor: default;
        &:hover {
            color: @transport-inactive;
            cursor: default;
        }
    }
}


//----- TRANSPORTS --------------------------------------//
.transMix() {
    > .@{val} {
        // Box-model
        margin-@{val}: @transport-width-short;
        margin-@{opp}: @transport-width-short;

        // Visual
        border-@{val}-width: 0;
        border-@{opp}-color: @transport-color;
        border-@{opp}-style: solid;
        border-@{opp}-width: @transport-width;
    }        
}
.transPos(@n, @i: 1) when (@i =< @n) {
    @val: extract(@transArr, @i);
    @opp: null;
    & when (@val = extract(@transArr, 1)) {
        @opp: bottom;
        .transMix;
    }
    & when (@val = extract(@transArr, 2)) {
        @opp: left;
        .transMix;
    }
    & when (@val = extract(@transArr, 3)) {
        @opp: top;
        .transMix;
    }
    & when (@val = extract(@transArr, 4)) {
        @opp: right;
        .transMix;
    }

    .transPos(@n, (@i + 1));
}


//----- MODAL WIDTHS ------------------------------------//
.modalWidth(@width) {
    @w: unit(@width, px);

    // Box-model
    width: @w !important;
    margin-left: ceil(-(@w / 2));
}


//----- SKINNING ----------------------------------------//
.skinning(@arrLen, @i: 1) when (@i =< @arrLen) {
    
    @varVal: extract(@varArr, @i);
    @classVal: extract(@classArr, @i);

    // background skinning
    .bg-@{classVal} { background-color: @varVal !important; }
    // font color skinning
    .color-@{classVal} { color: @varVal !important; }
    // border-color skinning
    .border-@{classVal} { border-color: @varVal !important; }

    .skinning(@arrLen, @i + 1);
}


//----- SLIDE PANEL -------------------------------------//
.slide-panel(@user-dimension; @side) {

    @dimension: unit(@user-dimension, px);

    & when (@side = top) {
        .mq-pnl-t {
            // Box-model
            height: @dimension !important;

            // Positioning
            top: -@dimension;
        }
        // for the top slide
        &.mq-pnl-open-t {
            // move the right side
            .mq-pnl-t {
                // Positioning
                top: 0;
            }
            // move the content with the right side
            .mq-pnl-static {
                // Positioning
                top: @dimension;
            }
        }
    }

    & when (@side = right) {
        .mq-pnl-r {
            // Box-model
            width: @dimension !important;

            // Positioning
            right: -@dimension;
        }
        // for the right slide
        &.mq-pnl-open-r {
            // move the right side
            .mq-pnl-r {
                // Positioning
                right: 0;
            }
            // move the content with the right side
            .mq-pnl-static {
                // Positioning
                right: @dimension;
                left: -@dimension;
            }
        }
    }

    & when (@side = bottom) {
        .mq-pnl-b {
            // Box-model
            height: @dimension !important;

            // Positioning
            bottom: -@dimension;
        }
        // for the top slide
        &.mq-pnl-open-b {
            // move the right side
            .mq-pnl-b {
                // Positioning
                bottom: 0;
            }
            // move the content with the right side
            .mq-pnl-static {
                // Positioning
                top: -@dimension;
            }
        }
    }

    & when (@side = left) {
        .mq-pnl-l {
            // Box-model
            width: @dimension !important;

            // Positioning
            left: -@dimension;
        }
        &.mq-pnl-open-l {
            // move the left side
            .mq-pnl-l {
                // Positioning
                left: 0;
            }
            // move the content with the left side
            .mq-pnl-static {
                // Positioning
                left: @dimension;
            }
        }
    }
}