@import "variables.less";
//
	// EDNA
//

// MIXINS

// Mixins need to have parenthesis after them
// in order to be ignored upon compiling.

.font-family() {
	font-family: Helvetica, Arial, sans-serif;
}
.font-family(@ff) when (@ff = default) {
	font-family: Helvetica, Arial, sans-serif;
}
.font-family(@ff) when (@ff = code) {
	font-family: Monaco, Menlo, Consolas, "Courier New", monospace;
}
.font-family(@ff) when (@ff = mono) {
	font-family: monospace;
}
.font-color() {
	color: @font-color;
}
.fontsize(@sizeValue) {
	@remValue: @sizeValue;
	@pxValue: (@sizeValue * 10);
	font-size: ~"@{pxValue}px"; // fallback for IE8
	font-size: ~"@{remValue}rem"; // REMs for awesome browsers
}


// CLEAR 
.clear() {
  clear: both;
}

// CLEARFIX 
// IE7
.clearfix() {
  *zoom: 1;

	&:before,
	&:after {
	  display: table;
	  line-height: 0;
	  content: "";
	}
	&:after {
	  clear: both;
	}
}


// HIDING THINGS
// DO NOT DISPLAY (inaccessible by screen readers)
.display-none() {
	display: none;
}
// HIDDEN (accessible by screen readers)
.hidden() {
	position: absolute !important;
	height: (@px * .1); width: (@px * .1); 
	overflow: hidden;
	clip: rect((@px * .1) (@px * .1) (@px * .1) (@px * .1)); /* IE6, IE7 */
	clip: rect((@px * .1), (@px * .1), (@px * .1), (@px * .1));
}

// TRANSPORT
.transport-top(@w: (@px * .5)) {
	border-right-width: @w;
	border-bottom-width: @w;
	border-left-width: @w;
	margin-bottom: (@w / 2);
	margin-top: -(@w / 2);
}
.transport-right(@w: (@px * .5)) {
	border-top-width: @w;
	border-bottom-width: @w;
	border-left-width: @w;
	margin-left: (@w / 2);
	margin-right: -(@w / 2);
}
.transport-bottom(@w: (@px * .5)) {
	border-top-width: @w;
	border-right-width: @w;
	border-left-width: @w;
	margin-bottom: (@w / 2);
	margin-top: -(@w / 2);
}
.transport-left(@w: (@px * .5)) {
	border-top-width: @w;
	border-right-width: @w;
	border-bottom-width: @w;
	margin-left: (@w / 2);
	margin-right: -(@w / 2);
}


// ROTATION
.rotate(@num) {
	@div: 100;
	@IE8rot: @num/@div;

	// USING THIS BIT OF LESS
	// unit(@dimension, [@unit: ""]);
	// remove or change the unit of a dimension

	filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=@IE8rot); // IE8 and lower
	-ms-transform: rotate( unit(@num, deg) ); // IE 9 and higher
	-o-transform: rotate( unit(@num, deg) ); // Opera
	-moz-transform: rotate( unit(@num, deg) ); // Mozilla
	-webkit-transform: rotate(unit(@num, deg)); // Safari
	transform: rotate( unit(@num, deg) );
}


// BOX-SIZING
.box(@sizing) {
	// should take either CONTENT or BORDER
	-webkit-box-sizing: escape("@{sizing}-box"); /* Safari/Chrome, other WebKit */
	-moz-box-sizing: escape("@{sizing}-box");    /* Firefox, other Gecko */
	box-sizing: escape("@{sizing}-box");         /* Opera/IE 8+ */
}


//----- MARGIN ----------------------------------------//

.mar(@n: 0; @s: em) when (@n = 0) {
	margin: @n;
}
.mar(@n: 0; @s: em) when not (@n = 0) {
	margin: escape("@{n}@{s}");
}
// margin top
.mar-t(@n: 0; @s: em) when (@n = 0) {
	margin-top: @n;
}
.mar-t(@n: 0; @s: em) when not (@n = 0) {
	margin-top: escape("@{n}@{s}");
}
// margin right
.mar-r(@n: 0; @s: em) when (@n = 0) {
	margin-right: @n;
}
.mar-r(@n: 0; @s: em) when not (@n = 0) {
	margin-right: escape("@{n}@{s}");
}
// margin bottom
.mar-b(@n: 0; @s: em) when (@n = 0) {
	margin-bottom: @n;
}
.mar-b(@n: 0; @s: em) when not (@n = 0) {
	margin-bottom: escape("@{n}@{s}");
}
// margin left
.mar-l(@n: 0; @s: em) when (@n = 0) {
	margin-left: @n;
}
.mar-l(@n: 0; @s: em) when not (@n = 0) {
	margin-left: escape("@{n}@{s}");
}
// margin 2
.mar-2(@n1; @n2; @s: em) {
	margin: escape("@{n1}@{s}") escape("@{n2}@{s}");
}
// margin 3
.mar-3(@n1; @n2; @n3; @s: em) {
	margin: escape("@{n1}@{s}") escape("@{n2}@{s}") escape("@{n3}@{s}");
}
// margin 4
.mar-4(@n1; @n2; @n3; @n4; @s: em) {
	margin: escape("@{n1}@{s}") escape("@{n2}@{s}") escape("@{n3}@{s}") escape("@{n4}@{s}");
}


//----- PADDING ----------------------------------------//

.pad(@n: 0; @s: em) when (@n = 0) {
	padding: @n;
}
.pad(@n: 0; @s: em) when not (@n = 0) {
	padding: escape("@{n}@{s}");
}
// padding top
.pad-t(@n: 0; @s: em) when (@n = 0) {
	padding-top: @n;
}
.pad-t(@n: 0; @s: em) when not (@n = 0) {
	padding-top: escape("@{n}@{s}");
}
// padding right
.pad-r(@n: 0; @s: em) when (@n = 0) {
	padding-right: @n;
}
.pad-r(@n: 0; @s: em) when not (@n = 0) {
	padding-right: escape("@{n}@{s}");
}
// padding bottom
.pad-b(@n: 0; @s: em) when (@n = 0) {
	padding-bottom: @n;
}
.pad-b(@n: 0; @s: em) when not (@n = 0) {
	padding-bottom: escape("@{n}@{s}");
}
// padding left
.pad-l(@n: 0; @s: em) when (@n = 0) {
	padding-left: @n;
}
.pad-l(@n: 0; @s: em) when not (@n = 0) {
	padding-left: escape("@{n}@{s}");
}
// padding 2
.pad-2(@n1; @n2; @s: em) {
	padding: escape("@{n1}@{s}") escape("@{n2}@{s}");
}
// padding 3
.pad-3(@n1; @n2; @n3; @s: em) {
	padding: escape("@{n1}@{s}") escape("@{n2}@{s}") escape("@{n3}@{s}");
}
// padding 4
.pad-4(@n1; @n2; @n3; @n4; @s: em) {
	padding: escape("@{n1}@{s}") escape("@{n2}@{s}") escape("@{n3}@{s}") escape("@{n4}@{s}");
}


//----- BORDERS ----------------------------------------//

.border-width(@widthT: (@px * .1); @widthR: (@px * .1); @widthB: (@px * .1); @widthL: (@px * .1)) {
	border-width: @widthT @widthR @widthB @widthL;
}
.border-style(@style: solid) {
	border-style: @style;	
}
.border-color(@color: @colorS3) {
	border-color: @colorP1;
}
//.border(@width: (@px * .1), @style: solid, @color: @colorS3) {
.border(@widthT: (@px * .1); @widthR: (@px * .1); @widthB: (@px * .1); @widthL: (@px * .1); @style: solid; @color: @colorS3) {
	border-width: @widthT @widthR @widthB @widthL;
	border-style: @style;
	border-color: @colorP1;
}

//----- BORDER RADIUS ----------------------------------------//

.radius(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius: @n;
	border-radius: @n;
}
.radius(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius: escape("@{n}@{s}");
	border-radius: escape("@{n}@{s}");
}
// top radius
.radius-t(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius-topleft: @n;
	-moz-border-radius-topright: @n;
	border-top-left-radius: @n;
	border-top-right-radius: @n;
}
.radius-t(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius-topleft: escape("@{n}@{s}");
	-moz-border-radius-topright: escape("@{n}@{s}");
	border-top-left-radius: escape("@{n}@{s}");
	border-top-right-radius: escape("@{n}@{s}");
}
// top left radius
.radius-tl(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius-topleft: @n;
	border-top-left-radius: @n;
}
.radius-tl(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius-topleft: escape("@{n}@{s}");
	border-top-left-radius: escape("@{n}@{s}");
}
// top right radius
.radius-tr(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius-topright: @n;
	border-top-right-radius: @n;
}
.radius-tr(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius-topright: escape("@{n}@{s}");
	border-top-right-radius: escape("@{n}@{s}");
}
// bottom radius
.radius-b(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius-bottomleft: @n;
	-moz-border-radius-bottomright: @n;
	border-bottom-left-radius: @n;
	border-bottom-right-radius: @n;
}
.radius-b(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius-bottomleft: escape("@{n}@{s}");
	-moz-border-radius-bottomright: escape("@{n}@{s}");
	border-bottom-left-radius: escape("@{n}@{s}");
	border-bottom-right-radius: escape("@{n}@{s}");
}
// bottom left radius
.radius-bl(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius-bottomleft: @n;
	border-bottom-left-radius: @n;
}
.radius-bl(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius-bottomleft: escape("@{n}@{s}");
	border-bottom-left-radius: escape("@{n}@{s}");
}
// bottom right radius
.radius-br(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius-bottomright: @n;
	border-bottom-right-radius: @n;
}
.radius-br(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius-bottomright: escape("@{n}@{s}");
	border-bottom-right-radius: escape("@{n}@{s}");
}
// left radius
.radius-l(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius-topleft: @n;
	-moz-border-radius-bottomleft: @n;
	border-top-left-radius: @n;
	border-bottom-left-radius: @n;
}
.radius-l(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius-topleft: escape("@{n}@{s}");
	-moz-border-radius-bottomleft: escape("@{n}@{s}");
	border-top-left-radius: escape("@{n}@{s}");
	border-bottom-left-radius: escape("@{n}@{s}");
}
// right radius
.radius-r(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius-topright: @n;
	-moz-border-radius-bottomright: @n;
	border-top-right-radius: @n;
	border-bottom-right-radius: @n;
}
.radius-r(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius-topright: escape("@{n}@{s}");
	-moz-border-radius-bottomright: escape("@{n}@{s}");
	border-top-right-radius: escape("@{n}@{s}");
	border-bottom-right-radius: escape("@{n}@{s}");
}
// all four radius
.radius-all(@n1: unit(@radius); @n2: unit(@radius); @n3: unit(@radius); @n4: unit(@radius); @s: px) {
	-moz-border-radius: escape("@{n1}@{s}") escape("@{n2}@{s}") escape("@{n3}@{s}") escape("@{n4}@{s}");
	border-radius: escape("@{n1}@{s}") escape("@{n2}@{s}") escape("@{n3}@{s}") escape("@{n4}@{s}");
}


//----- LIGHTEN & DARKEN ----------------------------------------//

// TEXT
.lightTxt1(@color) { color: lighten(@color, (@pct * .1) ); }
.darkTxt1(@color) { color: darken(@color, (@pct * .1) ); }
.lightTxt2(@color) { color: lighten(@color, (@pct * .2) ); }
.darkTxt2(@color) { color: darken(@color, (@pct * .2) ); }
.lightTxt3(@color) { color: lighten(@color, (@pct * .2) ); }
.darkTxt3(@color) { color: darken(@color, (@pct * .2) ); }

// BACKGROUND
.lightBg1(@color) { background-color: lighten(@color, (@pct * .1) ); }
.darkBg1(@color) { background-color: darken(@color, (@pct * .1) ); }
.lightBg2(@color) { background-color: lighten(@color, (@pct * .2) ); }
.darkBg2(@color) { background-color: darken(@color, (@pct * .2) ); }
.lightBg3(@color) { background-color: lighten(@color, (@pct * .2) ); }
.darkBg3(@color) { background-color: darken(@color, (@pct * .2) ); }

// BORDER
.lightBorder1(@color) { border-color: lighten(@color, (@pct * .1) ); }
.darkBorder1(@color) { border-color: darken(@color, (@pct * .1) ); }
.lightBorder2(@color) { border-color: lighten(@color, (@pct * .2) ); }
.darkBorder2(@color) { border-color: darken(@color, (@pct * .2) ); }
.lightBorder3(@color) { border-color: lighten(@color, (@pct * .2) ); }
.darkBorder3(@color) { border-color: darken(@color, (@pct * .2) ); }


//----- GRADIENTS ----------------------------------------//

.gradient(@stop: #EFEFEF) {
	@start: lighten(@stop, (@pct * .1) );

	background: @start;
	background: -moz-linear-gradient(top,  @start 0%, @stop @pct);
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,@start), color-stop(@pct,@stop));
	background: -webkit-linear-gradient(top,  @start 0%,@stop @pct);
	background: -o-linear-gradient(top,  @start 0%,@stop @pct);
	background: -ms-linear-gradient(top,  @start 0%,@stop @pct);
	background: linear-gradient(to bottom,  @start 0%,@stop @pct);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@start', endColorstr='@stop',GradientType=0 );
}


//----- TRUNCATE ----------------------------------------//

.truncate() {
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}