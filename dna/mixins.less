@import "variables.less";
//
	// EDNA
//

// MIXINS


//----- MIXINS FOR MIXINS -----------------------------//

// figure out the number
.number(@number: 0;) when not (@number = 0) {
	@num: @number;
}
.number(@number: 0;) when not ( isnumber(@number) ) {
	@num: 0;
}
// figure out the suffix
.suffix(@suffix: px;) when not (@suffix = px), (@suffix = em), (@suffix = rem) {
	@suf: /* check values */; 
}
.suffix(@suffix: px;) when (@suffix = px) {
	@suf: @suffix; 
}
.suffix(@suffix: em;) when (@suffix = em) {
	@suf: @suffix; 
}
.suffix(@suffix: rem;) when (@suffix = rem) {
	@suf: @suffix; 
}


.w(@n: 0;@s: px) when not (@n = 0) {
	.number(@n);
	.suffix(@s);
	width: unit(@num,@suf);
}
.w(@n: 0;@s: px) when (@n = 0) {
	.number(@n);
	.suffix(@s);
	width: @num;
}
.example {
	// .w(1;pax);
	.w(1;px);
	// .w;
}


// units
.unit(@suffix) when (@suffix = em) {
	@s: @suffix;
}
.unit(@suffix) when (@suffix = px) {
	@s: @suffix;
}
.unit(@suffix) when (@suffix = rem) {
	@s: @suffix;
}
.unit(@suffix) when not (@suffix = em), (@suffix = px), (@suffix = rem) {
	@s: /* check your values */;
}


//----- HEIGHT -----------------------------------------//

.ht(@n: 0; @s: px) when (@s = px), (@s = em), (@s = rem) {
	height: unit(@n, @s);
}
.ht(@n: 0; @s: px) when (@s = pct) {
	height: percentage(@n/100);
}
// min-width
.min-ht(@n: 0; @s: px) when (@s = px), (@s = em), (@s = rem) {
	min-height: unit(@n, @s);
}
.min-ht(@n: 0; @s: px) when (@s = pct) {
	min-height: percentage(@n/100);
}
.min-ht(@n: 0; @s: px) when (@n = 0) {
	min-height: @n;
}
// max-width
.max-ht(@n: 0; @s: px) when (@s = px), (@s = em), (@s = rem) {
	max-height: unit(@n, @s);
}
.max-ht(@n: 0; @s: px) when (@s = pct) {
	max-height: percentage(@n/100);
}
.max-ht(@n: 0; @s: px) when (@n = 0) {
	max-height: @n;
}


//----- WIDTH -----------------------------------------//

.wid(@n: 0; @s: px) when (@s = px), (@s = em), (@s = rem) {
	width: unit(@n, @s);
}
.wid(@n: 0; @s: px) when (@s = pct) {
	width: percentage(@n/100);
}
// min-width
.min-wid(@n: 0; @s: px) when (@s = px), (@s = em), (@s = rem) {
	min-width: unit(@n, @s);
}
.min-wid(@n: 0; @s: px) when (@s = pct) {
	min-width: percentage(@n/100);
}
.min-wid(@n: 0; @s: px) when (@n = 0) {
	min-width: @n;
}
// max-width
.max-wid(@n: 0; @s: px) when (@s = px), (@s = em), (@s = rem) {
	// .unit(@s);
	max-width: unit(@n, @s);
}
.max-wid(@n: 0; @s: px) when (@s = pct) {
	max-width: percentage(@n/100);
}
.max-wid(@n: 0; @s: px) when (@n = 0) {
	max-width: @n;
}


//----- FONTSIZE --------------------------------------//

.font-family() {
	font-family: Helvetica, Arial, sans-serif;
}
.font-family(@ff) when (@ff = default) {
	font-family: Helvetica, Arial, sans-serif;
}
.font-family(@ff) when (@ff = code) {
	font-family: Monaco, Menlo, Consolas, "Courier New", monospace;
}
.font-family(@ff) when (@ff = mono) {
	font-family: monospace;
}
.font-family(@ff) when (@ff = georgia) {
	font-family: Georgia, serif;
}
.font-color() {
	color: @font-color;
}
.fontsize(@sizeValue) {
	@remValue: @sizeValue;
	@pxValue: (@sizeValue * 10);
	font-size: ~"@{pxValue}px"; // fallback for IE8
	font-size: ~"@{remValue}rem"; // REMs for awesome browsers
}


//----- CLEAR -----------------------------------------//

.clear() {
  clear: both;
}


//----- CLEARFIX --------------------------------------//

// ie7
.clearfix() {
  *zoom: 1;
	&:before,
	&:after {
	  display: table;
	  line-height: 0;
	  content: "";
	}
	&:after {
	  clear: both;
	}
}


//----- HIDDEN THINGS ---------------------------------//

// do not display (inaccessible by screen readers)
.display-none() {
	display: none;
}
// hidden (accessible by screen readers)
.hidden() {
	position: absolute !important;
	height: (@px * .1); width: (@px * .1); 
	overflow: hidden;
	clip: rect((@px * .1) (@px * .1) (@px * .1) (@px * .1)); /* IE6, IE7 */
	clip: rect((@px * .1), (@px * .1), (@px * .1), (@px * .1));
}


//----- TRANSPORT -------------------------------------//

.transport-top(@w: (@px * .5)) {
	border-right-width: @w;
	border-bottom-width: @w;
	border-left-width: @w;
	margin-bottom: (@w / 2);
	margin-top: -(@w / 2);
}
.transport-right(@w: (@px * .5)) {
	border-top-width: @w;
	border-bottom-width: @w;
	border-left-width: @w;
	margin-left: (@w / 2);
	margin-right: -(@w / 2);
}
.transport-bottom(@w: (@px * .5)) {
	border-top-width: @w;
	border-right-width: @w;
	border-left-width: @w;
	margin-bottom: (@w / 2);
	margin-top: -(@w / 2);
}
.transport-left(@w: (@px * .5)) {
	border-top-width: @w;
	border-right-width: @w;
	border-bottom-width: @w;
	margin-left: (@w / 2);
	margin-right: -(@w / 2);
}


//----- ROTATION --------------------------------------//

.rotate(@num) {
	@div: 100;
	@IE8rot: @num/@div;

	// USING THIS BIT OF LESS
	// unit(@dimension, [@unit: ""]);
	// remove or change the unit of a dimension

	filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=@IE8rot); // IE8 and lower
	-ms-transform: rotate( unit(@num, deg) ); // IE 9 and higher
	-o-transform: rotate( unit(@num, deg) ); // Opera
	-moz-transform: rotate( unit(@num, deg) ); // Mozilla
	-webkit-transform: rotate(unit(@num, deg)); // Safari
	transform: rotate( unit(@num, deg) );
}


//----- BOX SIZING ------------------------------------//

.box(@sizing) when (@sizing = content), (@sizing = border) {
	// should take either CONTENT or BORDER
	-webkit-box-sizing: escape("@{sizing}-box"); /* Safari/Chrome, other WebKit */
	-moz-box-sizing: escape("@{sizing}-box");    /* Firefox, other Gecko */
	box-sizing: escape("@{sizing}-box");         /* Opera/IE 8+ */
}


//----- MARGIN ----------------------------------------//

.mar(@n: 0; @s: px) when (@n = 0) {
	margin: @n;
}
.mar(@n: 0; @s: px;) when not (@n = 0) {
	margin: unit(@n, @s);
}
// margin top
.mar-t(@n: 0; @s: px) when (@n = 0) {
	margin-top: @n;
}
.mar-t(@n: 0; @s: px) when not (@n = 0) {
	margin-top: unit(@n, @s);
}
// margin right
.mar-r(@n: 0; @s: px) when (@n = 0) {
	margin-right: @n;
}
.mar-r(@n: 0; @s: px) when not (@n = 0) {
	margin-right: unit(@n, @s);
}
// margin bottom
.mar-b(@n: 0; @s: px) when (@n = 0) {
	margin-bottom: @n;
}
.mar-b(@n: 0; @s: px) when not (@n = 0) {
	margin-bottom: unit(@n, @s);
}
// margin left
.mar-l(@n: 0; @s: px) when (@n = 0) {
	margin-left: @n;
}
.mar-l(@n: 0; @s: px) when not (@n = 0) {
	margin-left: unit(@n, @s);
}
// margin 2
.mar-2(@n1; @n2; @s: px) {
	margin: unit(@n, @s) unit(@n2, @s);
}
// margin 3
.mar-3(@n1; @n2; @n3; @s: px) {
	margin: unit(@n1, @s) unit(@n2, @s) unit(@n3, @s);
}
// margin 4
.mar-4(@n1; @n2; @n3; @n4; @s: px) {
	margin: unit(@n1, @s) unit(@n2, @s) unit(@n3, @s) unit(@n4, @s);
}


//----- PADDING ----------------------------------------//

.pad(@n: 0; @s: px) when (@n = 0) {
	padding: @n;
}
.pad(@n: 0; @s: px) when not (@n = 0) {
	padding: unit(@n, @s);
}
// padding top
.pad-t(@n: 0; @s: px) when (@n = 0) {
	padding-top: @n;
}
.pad-t(@n: 0; @s: px) when not (@n = 0) {
	padding-top: unit(@n, @s);
}
// padding right
.pad-r(@n: 0; @s: px) when (@n = 0) {
	padding-right: @n;
}
.pad-r(@n: 0; @s: px) when not (@n = 0) {
	padding-right: unit(@n, @s);
}
// padding bottom
.pad-b(@n: 0; @s: px) when (@n = 0) {
	padding-bottom: @n;
}
.pad-b(@n: 0; @s: px) when not (@n = 0) {
	padding-bottom: unit(@n, @s);
}
// padding left
.pad-l(@n: 0; @s: px) when (@n = 0) {
	padding-left: @n;
}
.pad-l(@n: 0; @s: px) when not (@n = 0) {
	padding-left: unit(@n, @s);
}
// padding 2
.pad-2(@n1; @n2; @s: px) {
	padding: unit(@n1, @s) unit(@n2, @s);
}
// padding 3
.pad-3(@n1; @n2; @n3; @s: px) {
	padding: unit(@n1, @s) unit(@n2, @s) unit(@n3, @s);
}
// padding 4
.pad-4(@n1; @n2; @n3; @n4; @s: px) {
	padding: unit(@n1, @s) unit(@n2, @s) unit(@n3, @s) unit(@n4, @s);
}


//----- BORDERS ----------------------------------------//

.border-width(@widthT: (@px * .1); @widthR: (@px * .1); @widthB: (@px * .1); @widthL: (@px * .1)) {
	border-width: @widthT @widthR @widthB @widthL;
}
.border-style(@style: solid) {
	border-style: @style;	
}
.border-color(@color: @colorS3) {
	border-color: @colorP1;
}
//.border(@width: (@px * .1), @style: solid, @color: @colorS3) {
.border(@widthT: (@px * .1); @widthR: (@px * .1); @widthB: (@px * .1); @widthL: (@px * .1); @style: solid; @color: @colorS3) {
	border-width: @widthT @widthR @widthB @widthL;
	border-style: @style;
	border-color: @colorP1;
}

//----- BORDER RADIUS ----------------------------------------//

.radius(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius: @n;
	border-radius: @n;
}
.radius(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius: unit(@n, @s);
	border-radius: unit(@n, @s);
}
// top radius
.radius-t(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius-topleft: @n;
	-moz-border-radius-topright: @n;
	border-top-left-radius: @n;
	border-top-right-radius: @n;
}
.radius-t(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius-topleft: unit(@n, @s);
	-moz-border-radius-topright: unit(@n, @s);
	border-top-left-radius: unit(@n, @s);
	border-top-right-radius: unit(@n, @s);
}
// top left radius
.radius-tl(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius-topleft: @n;
	border-top-left-radius: @n;
}
.radius-tl(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius-topleft: unit(@n, @s);
	border-top-left-radius: unit(@n, @s);
}
// top right radius
.radius-tr(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius-topright: @n;
	border-top-right-radius: @n;
}
.radius-tr(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius-topright: unit(@n, @s);
	border-top-right-radius: unit(@n, @s);
}
// bottom radius
.radius-b(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius-bottomleft: @n;
	-moz-border-radius-bottomright: @n;
	border-bottom-left-radius: @n;
	border-bottom-right-radius: @n;
}
.radius-b(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius-bottomleft: unit(@n, @s);
	-moz-border-radius-bottomright: unit(@n, @s);
	border-bottom-left-radius: unit(@n, @s);
	border-bottom-right-radius: unit(@n, @s);
}
// bottom left radius
.radius-bl(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius-bottomleft: @n;
	border-bottom-left-radius: @n;
}
.radius-bl(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius-bottomleft: unit(@n, @s);
	border-bottom-left-radius: unit(@n, @s);
}
// bottom right radius
.radius-br(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius-bottomright: @n;
	border-bottom-right-radius: @n;
}
.radius-br(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius-bottomright: unit(@n, @s);
	border-bottom-right-radius: unit(@n, @s);
}
// left radius
.radius-l(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius-topleft: @n;
	-moz-border-radius-bottomleft: @n;
	border-top-left-radius: @n;
	border-bottom-left-radius: @n;
}
.radius-l(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius-topleft: unit(@n, @s);
	-moz-border-radius-bottomleft: unit(@n, @s);
	border-top-left-radius: unit(@n, @s);
	border-bottom-left-radius: unit(@n, @s);
}
// right radius
.radius-r(@n: unit(@radius); @s: px) when (@n = 0) {
	-moz-border-radius-topright: @n;
	-moz-border-radius-bottomright: @n;
	border-top-right-radius: @n;
	border-bottom-right-radius: @n;
}
.radius-r(@n: unit(@radius); @s: px) when not (@n = 0) {
	-moz-border-radius-topright: unit(@n, @s);
	-moz-border-radius-bottomright: unit(@n, @s);
	border-top-right-radius: unit(@n, @s);
	border-bottom-right-radius: unit(@n, @s);
}
// all four radius
.radius-all(@n1: unit(@radius); @n2: unit(@radius); @n3: unit(@radius); @n4: unit(@radius); @s: px) {
	-moz-border-radius: unit(@n1, @s) unit(@n2, @s) unit(@n3, @s) unit(@n4, @s);
	border-radius: unit(@n1, @s) unit(@n2, @s) unit(@n3, @s) unit(@n4, @s);
}


//----- LIGHTEN & DARKEN ----------------------------------------//

// text
.lightTxt1(@color) { color: lighten(@color, (@pct * .1) ); }
.darkTxt1(@color) { color: darken(@color, (@pct * .1) ); }
.lightTxt2(@color) { color: lighten(@color, (@pct * .2) ); }
.darkTxt2(@color) { color: darken(@color, (@pct * .2) ); }
.lightTxt3(@color) { color: lighten(@color, (@pct * .2) ); }
.darkTxt3(@color) { color: darken(@color, (@pct * .2) ); }

// background
.lightBg1(@color) { background-color: lighten(@color, (@pct * .1) ); }
.darkBg1(@color) { background-color: darken(@color, (@pct * .1) ); }
.lightBg2(@color) { background-color: lighten(@color, (@pct * .2) ); }
.darkBg2(@color) { background-color: darken(@color, (@pct * .2) ); }
.lightBg3(@color) { background-color: lighten(@color, (@pct * .2) ); }
.darkBg3(@color) { background-color: darken(@color, (@pct * .2) ); }

// border
.lightBorder1(@color) { border-color: lighten(@color, (@pct * .1) ); }
.darkBorder1(@color) { border-color: darken(@color, (@pct * .1) ); }
.lightBorder2(@color) { border-color: lighten(@color, (@pct * .2) ); }
.darkBorder2(@color) { border-color: darken(@color, (@pct * .2) ); }
.lightBorder3(@color) { border-color: lighten(@color, (@pct * .2) ); }
.darkBorder3(@color) { border-color: darken(@color, (@pct * .2) ); }


//----- GRADIENTS ----------------------------------------//

.gradient(@stop: #EFEFEF) {
	@start: lighten(@stop, (@pct * .1) );

	background: @start;
	background: -moz-linear-gradient(top,  @start 0%, @stop @pct);
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,@start), color-stop(@pct,@stop));
	background: -webkit-linear-gradient(top,  @start 0%,@stop @pct);
	background: -o-linear-gradient(top,  @start 0%,@stop @pct);
	background: -ms-linear-gradient(top,  @start 0%,@stop @pct);
	background: linear-gradient(to bottom,  @start 0%,@stop @pct);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@start', endColorstr='@stop',GradientType=0 );
}


//----- TRUNCATE ----------------------------------------//

.truncate() {
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}